{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundry.js","containers/App2.js","serviceWorker.js","index.js"],"names":["Card","name","url","email","id","useState","ime","setIme","type","setType","type2","setType2","ind","setInd","a","fetch","fetched","json","pokemons","sprites","front_default","types","useEffect","fetchPokemon","className","alt","src","CardList","robots","map","user","i","key","SearchBox","searchChange","place","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","ErrorBoundry","state","haserror","error","info","this","setState","Component","App2","setRobots","searchfield","setSearchField","start","setStart","end","setEnd","then","pokemon","results","filterRobots","filter","robot","toLowerCase","includes","length","event","target","value","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.2aacfc8f.chunk.js","sourcesContent":["\r\nimport React, {useState,useEffect } from 'react';\r\n\r\n\r\n\r\n\r\nconst Card = ({name, email, id, url}) => {\r\nconst [ime, setIme] = useState([])\r\nconst [type, setType] = useState([])\r\nconst [type2, setType2] = useState([])\r\nconst [ind, setInd] = useState('')\r\n\r\nasync function fetchPokemon (url) {\r\nconst fetched = await fetch(url)\r\nconst pokemons = await fetched.json()\r\nawait setIme(pokemons.sprites.front_default)\r\nawait setType(pokemons.types[0].type.name)\r\nif (pokemons.types[1])\r\n{\r\n\t{await setType2(\"/\" + pokemons.types[1].type.name)}\r\n}\r\nelse{\r\n\t{await setType2(\"\")}\r\n}\r\nawait setInd(pokemons.id)\r\n}\r\n/*const [weight, setWeight] =useState([])*/\r\nuseEffect(() => {\r\n\r\nfetchPokemon(url)\r\n\r\n\t})\r\n\r\n/*useEffect(() => {\r\nfetch(url)\r\n\t.then(digis => digis.json())\r\n\t.then(digim => {\r\n\t\tsetIme(digim.sprites.front_default)\r\n\t\tsetWeight(digim.weight)\r\n\t\tsetType(digim.types[0].type.name)\r\n\t\tif (digim.types[1])\r\n\t\t\t{setType2(\"/\" + digim.types[1].type.name)}\r\n\t\tsetInd(digim.id)\r\n\r\n\t})\r\n\t})*/\r\n\r\n\r\n\r\n\treturn (\r\n\t\t<div className='tc bg-light-green dib bg3 pa3 ma2 grow bw2 shadow-5'>\r\n\t\t<h2>#{ind} {name}</h2>\r\n\t\t<img alt='photo' src={ime}/>\r\n\t\t<div>\r\n\r\n\t\t</div>\r\n\t\t<p>{type}{type2}</p>\r\n\t\t{/*<p>weight : {weight}</p>*/}\r\n\t\t</div>\r\n\t\t)\r\n}\r\n\r\n\r\nexport default Card;\r\n\r\n//http://localhost:3000/","import React from 'react';\r\nimport Card from './Card';\r\n\r\n\r\n/*async function fetchPokemon(url) {\r\n  const fetchurl = await fetch(url);\r\n  const info = await fetchurl.json();\r\n  const plz = info.types[0].type.name;\r\n}\r\n\r\nfunction fetchnormal (url){\r\n\treturn fetch(url)\r\n\t\t.then(function (info){\r\n\t\t\treturn info.json();\r\n\t\t});\r\n\t\t.then(pokemon => pokemon.types[0].type.name)\r\n}\r\nfunction fetch10 (url){\r\n\t\t fetch(user.url)\r\n\t\t.then(info => info.json())\r\n\t\t.then(pokemon => {\r\n\t\t\treturn pokemon.types[0].type.name\r\n\t\t}\r\n\t\t\t)}\r\n\r\nfunction foo (info){\r\n\treturn info;\r\n\r\n\t\tasync function fetchPokemon(url) {\r\n  const fetchurl = await fetch(url);\r\n  const info = await fetchurl.json();\r\n  const plz = await info.types[0].type.name;\r\n}\r\n\r\nconst final = (index, id, name, email, type, url) => {\r\n\tconsole.log(index, id, name, type);\r\n\treturn (\r\n\t\t\t<Card \r\n\t\t\tkey={index}\r\n\t\t\tid= {id}\r\n\t\t\tname= {name}\r\n\t\t\temail= {email}\r\n\t\t\ttype = {type}\r\n\t\t\turl = {url}\r\n\t\t\t/>\r\n\t);\r\n}\r\n\r\nreturn final(i, i, user.name, \"lalalid\", \"lalalid\", user.url)*/\r\n\r\n\r\n\t\t\t/*const ptype = (pokemon.types[0].type.name)*/\r\n\r\n\t\t/*\tconst poktype = fetchPokemon(user.url);*/\r\n\t\t\t/*console.log(poktype)*/\r\n\r\n/*fetchnormal(user.url).then(function(info){\r\n    console.log(info.types[0].type.name);\r\n})*/\r\n\r\nconst CardList = ({robots}) => {\r\n\t\r\n\r\n/*\tif (true){\r\n\t\tthrow new Error ('noooo');\r\n\t}*/\r\n\treturn(\r\n\t<div>\r\n\t{robots.map((user, i) =>{\r\n\t\treturn (\r\n\t\t\t<Card \r\n\t\t\tkey={i} \r\n\t\t\tid={i} \r\n\t\t\tname={user.name} \r\n\t\t\temail=\"lala\"\r\n\t\t\turl={user.url}\r\n\t\t\t/>\r\n\t);\r\n\t})}\r\n    </div>\r\n\t\t);\r\n}\r\nexport default CardList;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/*\r\nconst CardList = ({robots}) => {*/\r\n/*\tif (true){\r\n\t\tthrow new Error ('noooo');\r\n\t}*/\r\n/*\treturn(\r\n\t<div>\r\n\t{robots.map((user, i) =>{\r\n\t\treturn (\r\n\t\t\t<Card \r\n\t\t\tkey={i} \r\n\t\t\tid={user.id} \r\n\t\t\tname={user.name} \r\n\t\t\temail={user.email}\r\n\t\t\t/>\r\n\t);\r\n\t})}\r\n    </div>\r\n\t\t);\r\n}\r\nexport default CardList;*/","import React from 'react';\r\n\r\nconst SearchBox = ({searchChange, place}) =>{\r\n\treturn (\r\n\t\t<div className=\"pa2\">\r\n\t\t<input \r\n\t\tclassName ='pa3 ba b--green bg-lightest-blue'\r\n\t\ttype='search' \r\n\t\tplaceholder= {place}\r\n\t\tonChange={searchChange}\r\n\t\t/>\r\n\r\n\t\t</div>\r\n\t\t);\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n\treturn (\r\n\t\t<div style={{overflowY : 'scroll', border :'1px solid black', height : '500px'}} >\r\n\t\t{props.children}\r\n\t\t</div>\r\n\t\t);\r\n};\r\n\r\nexport default Scroll;","import React, {Component} from 'react';\r\n\r\nclass ErrorBoundry extends Component{\r\n\tconstructor(props){\r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n\t\t\thaserror : false\r\n\t\t}\r\n\r\n\t}\r\n\r\ncomponentDidCatch(error, info){\r\n\tthis.setState({haserror:true})\r\n}\r\n\r\nrender () {\r\n\tif (this.state.haserror){\r\n\t\treturn <h1>oops wrong</h1>\r\n\t}\r\n\treturn this.props.children\r\n}\r\n}\r\n\r\nexport default ErrorBoundry;\r\n","import React, {Component, useState, useEffect} from 'react';\r\nimport CardList from '../components/CardList';\r\nimport SearchBox from '../components/SearchBox';\r\nimport {robots} from '../components/robots';\r\nimport Scroll from '../components/Scroll'\r\nimport './App2.css';\r\nimport ErrorBoundry from '../components/ErrorBoundry';\r\n\r\nfunction App2 (){\r\n\tconst [robots, setRobots] = useState([])\r\n\tconst [searchfield, setSearchField] = useState('')\r\n\tconst [start, setStart] = useState(0)\r\n\tconst [end, setEnd] = useState(0)\r\n\r\nuseEffect(() => {\r\n/*\tfetch('https://jsonplaceholder.typicode.com/users')\r\n\t.then(response => response.json())\r\n\t.then(users => setRobots(users));*/\r\n\r\n\r\n//pokemon\r\n\r\n\tfetch(`https://pokeapi.co/api/v2/pokemon?limit=${start}&offset=${end}`)\r\n\t.then(pokemons => pokemons.json())\r\n\t.then(pokemon => \r\n\t\t/*console.log(pokemon.results)*/\r\n\t\tsetRobots(pokemon.results))\r\n}, [start, end])\r\n\t\r\nfunction onSearchChange  (event) {\r\n\tsetSearchField(event.target.value)\r\n\t}\r\n\r\nfunction onStartChange(event){\r\n\tsetStart(event.target.value)\r\n}\r\n\r\nfunction onEndChange(event){\r\n\tif(event.target.value >= 1)\r\n\tsetEnd(event.target.value -1)\r\n\telse\r\n\tsetEnd(0)\r\n}\r\n\r\nconst filterRobots = robots.filter(robot => {\r\n\t\treturn robot.name.toLowerCase().includes(searchfield.toLowerCase());\r\n\t\t})\r\n\r\n   \r\n\t/*console.log(event.target.value);\r\n\tconsole.log(filterRobots);*/\r\n\t\t\t\t\t\t\t\r\n\t\t/*const {robots, searchfield} = this.state;*/\r\n\t\t\r\n\t\treturn !robots.length ? \r\n\t\t\t<h1 className=\"tc\">loading</h1> :\r\n\t\t(\r\n\t\t<div className=\"tc\">\r\n\t\t<h1>POkEDEX</h1>\r\n\t\t<SearchBox searchChange ={onSearchChange} place = \"search pokemon\"/>\r\n\t\t<div className=\"box\">\r\n\t\t<h3>show:</h3>\r\n\t\t<SearchBox searchChange ={onStartChange} place = \"20\"/>\r\n\t\t<h3>from:</h3>\r\n\t\t<SearchBox searchChange ={onEndChange} place = \"1\"/>\r\n\t\t</div>\r\n\t\t<Scroll>\r\n\t\t<ErrorBoundry>\r\n\t\t<CardList robots={filterRobots}/>\r\n\t\t</ErrorBoundry>\r\n\t\t</Scroll>\r\n\t\t</div>\r\n\t\t);\r\n}\r\n\r\n\r\nexport default App2;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/*class App2 extends Component {\r\n\tconstructor(){\r\n\t\tsuper()\r\n\t\tthis.state ={\r\n\t\t\trobots : [],\r\n\t\t\tsearchfield: ''}\r\n\t}\r\n\r\ncomponentDidMount(){\r\n\tfetch('https://jsonplaceholder.typicode.com/users')\r\n\t.then(response => response.json())\r\n\t.then(users => this.setState({robots : users}));\r\n\t\t\t\t\t}\r\n\r\n   onSearchChange = (event) => {\r\n\tthis.setState({searchfield : event.target.value})*/\r\n\t\r\n\t/*console.log(event.target.value);\r\n\tconsole.log(filterRobots);*/\r\n/*\t\t\t\t\t\t\t\t}\r\n\trender(){\r\n\t\tconst {robots, searchfield} = this.state;\r\n\t\tconst filterRobots = robots.filter(robot => {\r\n\t\treturn robot.name.toLowerCase().includes(searchfield.toLowerCase());\r\n\t\t})\r\n\t\treturn !robots.length ? \r\n\t\t\t<h1 className=\"tc\">loading</h1> :\r\n\t\t(\r\n\t\t<div className=\"tc\">\r\n\t\t<h1>robofriends</h1>\r\n\t\t<SearchBox searchChange ={this.onSearchChange}/>\r\n\t\t<Scroll>\r\n\t\t<ErrorBoundry>\r\n\t\t<CardList robots={filterRobots}/>\r\n\t\t</ErrorBoundry>\r\n\t\t</Scroll>\r\n\t\t</div>\r\n\t\t);\r\n\t\t\t\t\t\t\t}\t\r\n\t\t\t}\r\n\r\n\r\nexport default App2;*/","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App2 from './containers/App2';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\n\n\nReactDOM.render(\n  <React.StrictMode>\n<App2 />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}